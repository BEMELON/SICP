#lang sicp
(#%require "Logics.rkt")

(define a (make-wire))
(define b (make-wire))
(define s (make-wire))
(define c (make-wire))

; (half-adder a b s c)
; (set-signal! a 1)
; (set-signal! b 1)
; (s 'status)
; (c 'status)

(probe 'a a)
(probe 'b b)
(probe 's s)
(or-gate a b s)
(set-signal! a 1)
(set-signal! b 1)
(propagate)

(set-signal! a 0)
(set-signal! b 0)
(propagate)

(get-signal a)
(get-signal b)
(get-signal s)

; (define input-1 (make-wire))
; (define input-2 (make-wire))
; (define sum (make-wire))
; (define carry (make-wire))
; (probe 'sum sum)
; (probe 'carry carry)
; (half-adder input-1 input-2 sum carry)
; (set-signal! input-1 1)
; (propagate)
; (get-signal sum)
; (get-signal carry)